yolo v3 的tf实现

网络部分
	
	1 yolo_top：组装基础网络和yolo网络，封装成最终的yolov3
		
		init
			建立网络：
				包括 darknet53，基础网络特征输出
					yolo_head，最终特征输出 yolo123，yolo456，yolo789
			建立输出：
				最终预测输出分三组（不同特征层次和尺度）
					Detection_0（yolo123）
					Detection_1（yolo456）
					Detection_2（yolo789）

		compute_loss
			对三组尺度分别实现
				预处理标注框
				根据真实标注框和预测结果来计算三个loss（置信度，位置，分类），并且相加得到这个尺度的loss

			将三组尺度的loss相加得到最终用于梯度下降的loss

		predict
			对三组尺度分别实现
				整理好网络预测结果的格式（对yolo123来说就是13*13*3种预测结果列表）

			将三组尺度的预测结果拼接起来，形成所有结果

			过滤结果
				对三个anchorbox的三组预测只取最大的一个
				根据置信度得分筛选
				nms，非极大值抑制


	2 darknet53：基础网络的实现
		
		实现 darknet53
			基于1*1和3*3的53层全卷积网络
			每个层次都可以导出，这里最终只导出了三组

	3 #核心# yolo_layer：yolo网络的实现

		yolo_head
		得出三个特征
			分别从feat_ex, res18, res10得到
			通过 1*1 3*3卷积，upsample，route分别得出三组

			conv74 52x75
			conv66 26x75
			conv58 13x75

		yolo_det
		得出 bounding box（3组，每组3个，）

			分别从三个特征，通过 exp 和 sigmoid，得出x y w h c class

			从 13*13*3*25得出的，即
			# box_xy: [None, 13, 13, 3, 2] 					：对13*13有 13*13*3个 x y 猜测
        		# box_wh: [None, 13, 13, 3, 2]					：同上
        		# box_confidence: [None, 13, 13, 3, 1] 			：13*13*1
        		# box_class_probs: [None, 13, 13, 3, 20] 		：13*13*20

        	preprocess_true_boxes

        		处理标注的框
        		仅在训练时使用

        	confidence_loss

        		计算置信度loss

        	cord_cls_loss

        		计算分类和位置loss

推理部分

训练部分

数据处理部分
